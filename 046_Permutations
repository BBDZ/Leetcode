public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0) {
            return result;
        }

        List<Integer> combination = new ArrayList<Integer>();
        helper(nums, result, combination, 0);
        return result;
        
    }
    private void helper(int[] nums, List<List<Integer>> result, List<Integer> combination,int index) {
        if(index == nums.length) {
            for(int i = 0; i < nums.length; i++) {
                combination.add(nums[i]);
            }
            
            result.add(new ArrayList<Integer>(combination));
            //result.add(combination);
            
            for(int i = 0; i < nums.length; i++) {
                combination.clear();
            }
            return;
        }
        
        for(int j = index; j < nums.length; j++) {
            swap(nums, index, j);
            helper(nums, result, combination, index + 1);
            swap(nums, index, j);
        }
    }
    
    private void swap(int [] array, int i, int j) {
        int tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }
}
